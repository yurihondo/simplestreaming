name: Create Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to create release from'
        required: true
      tag:
        description: 'Tag name'
        required: true
      tag_previous:
        description: 'Previous tag name'
        required: true

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install jq

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

      - name: Create tag
        run: |
          git fetch --all --tags
          git checkout ${{ github.event.inputs.branch }}
          git tag ${{ github.event.inputs.tag }}
          git push origin ${{ github.event.inputs.tag }}

      - name: Generate release notes
        env:
          GH_TOKEN: ${{ secrets.GH_API_TOKEN }}
        run: |
          PR_LIST=$(gh api -X GET repos/:owner/:repo/pulls \
            -q ".[] | select(.merged_at >= \"$(gh api -X GET repos/:owner/:repo/git/refs/tags/${{ github.event.inputs.tag_previous }} | jq -r .object.sha | xargs -I {} gh api -X GET repos/:owner/:repo/git/commits/{})\" and .merged_at <= \"$(gh api -X GET repos/:owner/:repo/git/refs/tags/${{ github.event.inputs.tag }} | jq -r .object.sha | xargs -I {} gh api -X GET repos/:owner/:repo/git/commits/{})\") | \"- [#\(.number)](\(.html_url)) \(.title)\"" )
          echo "RELEASE_NOTES=$PR_LIST" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Release ${{ github.event.inputs.tag }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
